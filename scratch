#
# Initialize Db to create schema.rb
#
# ...


##
# install react in rails with webpacker
#
cd ${tmp_dir}/web-common-core
bundle exec rails webpacker:install:react
git add --all; git commit -m "install react in rails with webpacker"
mkdir app/javascript/components/
cat <<- 'EOF' >> app/javascript/packs/application.js

	import React from 'react'
	import ReactDOM from 'react-dom'

EOF
yarn install
git add --all; git commit -m "install react in rails with webpacker"


git add --all; git commit -m "Install Stimulus Js"



# after stimulus

##
# install bootstrap
#
cd ${tmp_dir}/web-common-core
yarn add bootstrap jquery popper.js expose-loader @fortawesome/fontawesome-free
git add --all; git commit -m "Installing bootstrap and jQuery - yarn add bootstrap jquery popper.js expose-loader @fortawesome/fontawesome-free"
sed -i '$d' config/webpack/environment.js # strips last line
cat <<- 'EOF' >> config/webpack/environment.js
	const webpack = require('webpack')
	environment.plugins.append('Provide',
	  new webpack.ProvidePlugin({
	    $: 'jquery',
	    jQuery: 'jquery',
	    Popper: ['popper.js', 'default']
	  })
	)
	
	// Make $ available on the window object
	// for SJR views and jQuery plugins
	// that may expect `$` to be globally available.
	environment.loaders.append('expose', {
	    test: require.resolve('jquery'),
	    use: [{
	        loader: 'expose-loader',
	        options: '$'
	    }, {
	        loader: 'expose-loader',
	        options: 'jQuery',
	    }]
	})
	
	module.exports = environment
EOF
cat <<- 'EOF' >> app/javascript/packs/application.js
	// Make $ available on the window object
	// for SJR views and jQuery plugins
	// that may expect `$` to be globally available.
	require('expose-loader?$!jquery')
	
	// js
	//import 'bootstrap'
	import "@fortawesome/fontawesome-free/js/all";
	
	//css
	//import '../stylesheets/application'
EOF
mkdir app/javascript/stylesheets || true
touch app/javascript/stylesheets/_custom.scss
cat <<- 'EOF' >> app/javascript/stylesheets/application.scss
	//@import "~bootstrap/scss/bootstrap"; // never forget the semicolon
	//@import "./_custom";  // bootstrap custom variants
	@import '@fortawesome/fontawesome-free';
EOF
# add stylesheet_pack_tag to layout, without this, production env won't have (bootstrap) styles

OLDIFS=$IFS; IFS=$'~' # https://unix.stackexchange.com/q/264926
s1="javascript_pack_tag"
s2="\    <%= stylesheet_pack_tag 'application', media: 'all', 'data-turbolinks-track': 'reload' %>"
sed -i "/$s1.*/a $s2" app/views/layouts/application.html.erb
IFS=$OLDIFS
git add --all; git commit -m "Installed bootstrap and jQuery"



##
# adding a react custom component in to rails
#
if false; then
cd ${tmp_dir}/web-common-core
cat <<- 'EOF' >> app/javascript/packs/application.js

	import ExampleTodo from '../components/example_todo'

	// https://stackoverflow.com/a/44739914
	// ...if this is included in your application.js, then any page with a #whatever element will get the component.
	document.addEventListener('turbolinks:load', () => {
	  var element = document.getElementById("component-10aaaf7");
	  if (element) {
	    ReactDOM.render(<ExampleTodo name="example" />, element)
	  }
	})

EOF
git add --all; git commit -m "adding a react custom component in to rails"
cat <<- 'EOF' >> app/javascript/components/example_todo.js
	import React from 'react'
	
	class ExampleTodo extends React.Component {
	  constructor(props) {
	    super(props);
	    this.state = { items: [], text: '' };
	    this.handleChange = this.handleChange.bind(this);
	    this.handleSubmit = this.handleSubmit.bind(this);
	  }
	
	  render() {
	    return (
	      <div>
	        <h3>TODO</h3>
	        <TodoList items={this.state.items} />
	        <form onSubmit={this.handleSubmit}>
	          <label htmlFor="new-todo">
	            What needs to be done?
	          </label>
	          <input
	            id="new-todo"
	            onChange={this.handleChange}
	            value={this.state.text}
	          />
	          <button>
	            Add #{this.state.items.length + 1}
	          </button>
	        </form>
	      </div>
	    );
	  }
	
	  handleChange(e) {
	    this.setState({ text: e.target.value });
	  }
	
	  handleSubmit(e) {
	    e.preventDefault();
	    if (this.state.text.length === 0) {
	      return;
	    }
	    const newItem = {
	      text: this.state.text,
	      id: Date.now()
	    };
	    this.setState(state => ({
	      items: state.items.concat(newItem),
	      text: ''
	    }));
	  }
	}
	
	class TodoList extends React.Component {
	  render() {
	    return (
	      <ul>
	        {this.props.items.map(item => (
	          <li key={item.id}>{item.text}</li>
	        ))}
	      </ul>
	    );
	  }
	}
	export default ExampleTodo
EOF
git add --all; git commit -m "adding a react custom component in to rails"
fi





###
## Add ag-grid (react component) to rails
##
#cd ${tmp_dir}/web-common-core
#yarn add ag-grid-community ag-grid-react
#yarn install
#git add --all; git commit -m "Add ag-grid (react component) to rails"
#cat <<- 'EOF' >> app/javascript/packs/application.js
#
#	import AgGrid from '../components/ag_grid'
#	// https://stackoverflow.com/a/44739914
#	// ...if this is included in your application.js, then any page with a #whatever element will get the component.
#	document.addEventListener('turbolinks:load', () => {
#	  var element = document.getElementById("component-6f75c8a");
#	  if (element) {
#	    ReactDOM.render(<AgGrid name="example" />, element)
#	  }
#	})
#
#EOF
#cat <<- 'EOF' >> app/javascript/components/ag_grid.js
#	// example from https://www.ag-grid.com/react-grid/
#	import React, { Component } from 'react';
#	//import './App.css';
#	import { AgGridReact } from 'ag-grid-react';
#	import 'ag-grid-community/dist/styles/ag-grid.css';
#	import 'ag-grid-community/dist/styles/ag-theme-alpine.css';
#	
#	class AgGrid extends Component {
#	  constructor(props) {
#	    super(props);
#	    this.state = {
#	      columnDefs: [{
#	        headerName: "Make", field: "make"
#	      }, {
#	        headerName: "Model", field: "model"
#	      }, {
#	        headerName: "Price", field: "price"
#	      }],
#	      rowData: [{
#	        make: "Toyota", model: "Celica", price: 35000
#	      }, {
#	        make: "Ford", model: "Mondeo", price: 32000
#	      }, {
#	        make: "Porsche", model: "Boxter", price: 72000
#	      }]
#	    }
#	  }
#	
#	  render() {
#	    return (
#	      <div
#	        className="ag-theme-alpine"
#	        style={{
#	        height: '250px',
#	        width: '600px' }}
#	      >
#	        <AgGridReact
#	          columnDefs={this.state.columnDefs}
#	          rowData={this.state.rowData}>
#	        </AgGridReact>
#	      </div>
#	    );
#	  }
#	}
#	
#	export default AgGrid;
#EOF
#git add --all; git commit -m "Add ag-grid (react component) to rails"




#
# Gallery of features
#
cd ${tmp_dir}/web-common-core
bundle exec rails g controller Gallery index page_two --no-helper --no-assets
git add --all; git commit -m "rails g controller Gallery index --no-helper --no-assets"
# remove last test
head -n -6 test/controllers/gallery_controller_test.rb  | sponge test/controllers/gallery_controller_test.rb
echo 'end' >> test/controllers/gallery_controller_test.rb
rm -rf ./app/views/gallery
git add --all; git commit -m "rm -rf ./app/views/gallery"
cp -r ${dir}/__gallery app/views/gallery
cp ${dir}/__gallery.rb app/models/gallery.rb
cp ${dir}/__gallery_controller.rb app/controllers/gallery_controller.rb
cp ${dir}/__custom.scss app/javascript/stylesheets/_custom.scss
cp ${dir}/__seeds.rb db/seeds.rb
sed -i '$d' app/policies/gallery_policy.rb # remove last line
cat << 'EOF' >> app/policies/gallery_policy.rb
  def page_two
    true
  end
end
EOF
git add --all; git commit -m 'Added gallery controller, model, views and policy'
# this prevents an error from happening when running tests
mv test/fixtures/users.yml test/fixtures/users.yml.txt
git add --all; git commit -m 'this prevents an error from happening when running tests'


