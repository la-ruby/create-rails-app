#!/bin/bash



##
# set bash flags for optimal safety
# 
set -e  # fail early
set -u  # warn about empty variables
set -x  # debug mode (during development)



# declare some global variables and functions
LATEST_RAILS_VERSION="6-0-stable"
LATEST_RUBY_VERSION=""
dir=$(pwd) # current direcotry
curr_time=$(date +"%Y-%m-%d_%H-%M-%S")
MY_LATEST_COMMIT=$(git rev-parse --short HEAD)



##
# Insist on latest ruby
#
insist_on_latest_ruby() {
  expected_version=$(curl -s https://cache.ruby-lang.org/pub/ruby/index.txt | tail -n 1 | cut -f1 | cut -d '-' -f2)
  found_version=$(ruby -v | perl -nle 'm/ruby ([\d\.]*)/; print $1')
  if [ "$expected_version" = "$found_version" ]; then
    echo "Ruby version $found_version detected"
    return 0
  else
    echo "Ruby version $expected_version expected"
    return 1
  fi  
}



##
# find latest stable ruby version
#
find_latest_ruby() {
  curl -s https://cache.ruby-lang.org/pub/ruby/index.txt | tail -n 1 | cut -f1 | cut -d '-' -f2
}


#
# Append something to ruby file
#
append_to_file() {
  sed -i '$d' $1 # strips last line
  echo $2 >> $1
  echo 'end' >> $1
}

# creates a temporary directory
tmp_dir=$(mktemp -d -t cra-XXXXX)



# figure out ruby version
LATEST_RUBY_VERSION=$(find_latest_ruby)



# prerequisites
insist_on_latest_ruby



# Download child repo
cd $tmp_dir
git clone https://github.com/la-ruby/web-common-core



# setup git user
cd ${tmp_dir}/web-common-core
git config user.name "Machine User 4"; \
git config user.email $(echo 'fnz+znpuvar-hfre-4@fnz-jr.pbz' | tr '[A-Za-z]' '[N-ZA-Mn-za-m]')



# Clean slate for child repo
cd ${tmp_dir}/web-common-core
most_recent_clean_state=$(git log --oneline | grep 'Clean slate' | head -n 1 | cut -f 1 -d ' ')
git diff --binary -R $most_recent_clean_state..HEAD > /tmp/1.binary.diff
git apply /tmp/1.binary.diff
git add --all; git commit -m "Clean slate for child repo"
[ $(ls -1A . | wc -l) -eq 2 ] # make sure dir is clean (only .git and README remains)
git commit -m "Clean slate for child repo"



##
# Install edge rails
#
cd ${tmp_dir} 
git clone -b $LATEST_RAILS_VERSION --single-branch https://github.com/rails/rails
cd ${tmp_dir}/rails
LATEST_COMMIT=$(git rev-parse --short HEAD) # comes in handy later
bundle update --bundler
bundle install
cd ${tmp_dir}/rails/railties/exe
bundle exec rails --version
bundle exec rails new ${tmp_dir}/web-common-core --dev --database=postgresql --force
cd ${tmp_dir}/web-common-core
mkdir doc #nodoc
(bundle exec rails new --help 2>&1 | tee doc/bundle_exec_rails_new_help.txt) # nodoc
bundle exec rails --version # verify
git add --all; git commit -m "bundle exec rails new --dev --database=postgresql"
# Without this, you'll get the error: The path `/home/travis/.cra/rails` does not exist.
cd ${tmp_dir}/web-common-core
s1='gem .rails.,.*'
s2="gem 'rails', git: 'https:\/\/github.com\/rails\/rails.git', ref: '$LATEST_COMMIT'"
perl -pi.bak -e "s/$s1/$s2/" Gemfile
git add --all; git commit -m "Point gem path to github commit"
bundle install
git add --all; git commit -m "Install edge rails"



#
# Initialize Db, creates schema.rb
#
cd ${tmp_dir}/web-common-core
bundle exec rails db:create db:migrate
git add --all; git commit -m "Initialize Db, creates schema.rb"



##
# Install devise
#
cd ${tmp_dir}/web-common-core
echo 'gem "devise"' >> Gemfile
bundle install
bundle exec rails generate devise:install 2>&1 | tee doc/bundle_exec_rails_generate_devise_install.txt
bundle exec rails generate devise User
bundle exec rails generate devise:views
bundle exec rails generate devise:controllers
bundle exec rails db:migrate
git add --all; git commit -m "Install devise"



#
# Some hacks to reduce daily noise
#
cd ${tmp_dir}/web-common-core
for f in db/migrate/*.rb; do mv $f "db/migrate/00000000000001"${f:25}; done
rand1='5ba7277bf09e255a9a4cb6258a70826e9a8fd8bffc4c71984fa7686a56dd1842b4a8e6436346873e721f5b1bf63ff7b47decbec7174d72e98ff1fa5a777c86ee'
sed 's/\  # config.secret_key.*/\  # config.secret_key = \x27'$rand1'\x27/' config/initializers/devise.rb | sponge config/initializers/devise.rb
git add --all; git commit -m "Reduce some noise"
rand1='5ba7277bf09e255a9a4cb6258a70826e9a8fd8bffc4c71984fa7686a56dd1842b4a8e6436346873e721f5b1bf63ff7b47decbec7174d72e98ff1fa5a777c86ee'
sed 's/\  # config.pepper.*/\  # config.pepper= \x27'$rand1'\x27/' config/initializers/devise.rb | sponge config/initializers/devise.rb
sed 's/2020_.._.._....../2020_01_01_000001/' db/schema.rb | sponge db/schema.rb
git add --all; git commit -m "Reduce some noise"



#
# Mute auto created fixtures since they aren't used yet
# prevents occasional ActiveRecord::RecordNotUnique: PG::UniqueViolation: ERROR:  duplicate key value violates unique constraint "index_users_on_email"
#
sed -i 's/^/#/' test/fixtures/users.yml
git add --all; git commit -m "Mute auto created fixtures since they aren't used yet"



##
# Install pundit
#
cd ${tmp_dir}/web-common-core
echo 'gem "pundit"' >> Gemfile
bundle install
bundle exec rails g pundit:install
# secure by default
sed -i '$d' app/controllers/application_controller.rb # strips last line
cat << 'EOF' >> app/controllers/application_controller.rb
  include Pundit
  rescue_from Pundit::NotAuthorizedError, with: :user_not_authorized

  def user_not_authorized
    if current_user
      redirect_to pages_dashboard_path
    else
      redirect_to new_user_session_path
    end
  end
end
EOF
git add --all; git commit -m "Install pundit"



##
# Keep an eye on page speed with rack mini profiler
#
cd ${tmp_dir}/web-common-core
echo "gem 'rack-mini-profiler'" >> Gemfile
bundle install
git add --all; git commit -m "Keep an eye on page speed with rack mini profiler"



##
# Front end stuff jquery, bootstrap, icons, stimulus, react, vue
#
# TODO



##
# Install stimulus.js in rails with webpacker
#
cd ${tmp_dir}/web-common-core
bundle exec rails webpacker:install:stimulus
git add --all; git commit -m "Install stimulus.js in rails with webpacker"



#
# Update README
#
cd ${tmp_dir}/web-common-core
cp ${dir}/__README.md ./README.md
replacement=${curr_time}
perl -pi.bak -e "s/__REPLACEME1__/$replacement/" README.md
replacement=${LATEST_RAILS_VERSION}
perl -pi.bak -e "s/__REPLACEME2__/$replacement/" README.md
replacement=${LATEST_COMMIT}
perl -pi.bak -e "s/__REPLACEME3__/$replacement/" README.md
replacement=${MY_LATEST_COMMIT}
perl -pi.bak -e "s/__REPLACEME5__/$replacement/" README.md
# bootstrap
replacement=$(yarn list --pattern bootstrap --depth=1 | grep ' bootstrap@' | cut -d '@' -f 2)
perl -pi.bak -e "s/__REPLACEME6__/$replacement/" README.md
# devise
replacement=$(gem list |grep devise | head -n1)
perl -pi.bak -e "s/__REPLACEME7__/$replacement/" README.md
# pundit
replacement=$(gem list |grep pundit | head -n1)
perl -pi.bak -e "s/__REPLACEME8__/$replacement/" README.md
# react
replacement=$(yarn list --pattern react --depth=1 | grep ' react@' | cut -d '@' -f 2)
perl -pi.bak -e "s/__REPLACEME9__/$replacement/" README.md
git add --all; git commit -m "Update README"



#
# CI Config
#
cd ${tmp_dir}/web-common-core
cp ${dir}/__.travis.yml .travis.yml
git add --all; git commit -m "Added CI config"
replacement=$(cat .ruby-version | sed 's/^ruby-//')
perl -pi.bak -e "s/__REPLACEME1__/$replacement/" .travis.yml
git add --all; git commit -m "CI config"



##
# Install simplecov for test coverage metrics in rails
#
cd ${tmp_dir}/web-common-core
echo "gem 'simplecov', '0.16', require: false, group: :test" >> Gemfile
bundle install
# prepend to test/test_helper.rb
cat <<- 'EOF' >> ${tmp_dir}/part_a
	require 'simplecov'
	SimpleCov.start
EOF
cp test/test_helper.rb ${tmp_dir}/part_b
cat ${tmp_dir}/part_a ${tmp_dir}/part_b > test/test_helper.rb
echo "coverage" >> .gitignore
git add --all; git commit -m "Install simplecov for test coverage metrics in rails"



##
# An app.json is required by heroku CI and heroku pipelines
#
cd ${tmp_dir}/web-common-core
cat <<- 'EOF' > app.json
{

  "buildpacks": [
    {
      "url": "https://github.com/heroku/heroku-buildpack-nodejs.git"
    },
    {
      "url": "https://github.com/heroku/heroku-buildpack-ruby.git"
    }
  ],
  "environments": {
    "test": {
      "scripts": {
        "test": "yarn install && bundle install && bundle exec rails test"
      },
      "addons":[
        "heroku-postgresql"
      ]
    }
  }
}
EOF
git add --all; git commit -m "An app.json is required by heroku CI and heroku pipelines"



##
# Install bootstrap on rails 6 with webpacker
#
cd ${tmp_dir}/web-common-core
# https://ifiwere.me/technology/2020/02/21/rails_6_with_bootstrap_4.html
yarn add bootstrap jquery popper.js expose-loader
cat <<- 'EOF' >> config/webpack/environment.js
	
	// https://github.com/webpack-contrib/expose-loader/blob/master/README.md
	environment.loaders.append('expose', {
	        test: require.resolve('jquery'),
	        loader: 'expose-loader',
	        options: {
	          // For `underscore` library, it can be `_.map map` or `_.map|map`
	          exposes: 'jquery',
	        }
	});

        // needed?
	// https://www.vic-l.com/setup-bootstrap-in-rails-6-with-webpacker-for-development-and-production/
	//const webpack = require('webpack')
	//environment.plugins.append('Provide',
	//  new webpack.ProvidePlugin({
	//    $: 'jquery',
	//    jQuery: 'jquery',
	//    Popper: ['popper.js', 'default']
	//  })
	//)

	module.exports = environment
EOF
s2="\    <%= stylesheet_pack_tag 'application', media: 'all', 'data-turbolinks-track': 'reload' %>"
sed -i "/javascript_pack_tag.*/a $s2" app/views/layouts/application.html.erb
cat <<- 'EOF' >> app/javascript/packs/application.js

	import $ from 'jquery';
	import 'bootstrap/dist/js/bootstrap';
	import '../stylesheets/application';

EOF
mkdir app/javascript/stylesheets
cat <<- 'EOF' > app/javascript/stylesheets/application.scss
	@import 'node_modules/bootstrap/scss/bootstrap';
EOF
git add --all; git commit -m "Install bootstrap on rails 6 with webpacker"



##
# Some css setup for sprockets
#
cd ${tmp_dir}/web-common-core
touch app/assets/stylesheets/_variables.scss
git add --all; git commit -m "Css setup for sprockets"



#
#
# An example application
#
#
cd ${tmp_dir}/web-common-core
bundle exec rails g controller pages dashboard
sed -i 's/success/redirect/g' test/controllers/pages_controller_test.rb
append_to_file 'config/routes.rb' "
  root 'pages#dashboard'
"

cat <<- 'EOF' > app/controllers/pages_controller.rb
class PagesController < ApplicationController
  after_action :verify_authorized

  # users end up here after logging in
  def dashboard
    authorize :page, :dashboard?
  end
end
EOF
cat <<- 'EOF' > app/policies/page_policy.rb
class PagePolicy < Struct.new(:user, :page)

  def dashboard?
    user.present?
  end

end
EOF
# building .logo-login-block
cat ${dir}/__wip/_variables.scss >> app/assets/stylesheets/_variables.scss
cp ${dir}/__wip/sessions.scss app/assets/stylesheets/sessions.scss
cp ${dir}/__wip/sessions_new.html.erb app/views/devise/sessions/new.html.erb
git add --all; git commit -m 'An example application'
#
#
# /an example application
#
#



##
# Let views specify page title
#
cd ${tmp_dir}/web-common-core
sed 's/<title.*/<title><%= yield :title %><\/title>/g' app/views/layouts/application.html.erb | sponge app/views/layouts/application.html.erb
git add --all; git commit -m "Let views specify page title"




#
# Final push
#
# setup git remote
cd ${tmp_dir}/web-common-core
bundle package
rm README.md.bak Gemfile.bak .travis.yml.bak
git add --all; git commit -m 'bundle pack and cleanup .bak files'
git remote remove origin
git remote add origin https://machine-user-4:${GIT_PASSWORD}@github.com/la-ruby/web-common-core.git
# push
git push origin HEAD




