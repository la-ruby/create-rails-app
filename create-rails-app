#!/bin/bash -ex

main() {
  DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )" # where this script is
  TARGET="6-0-stable"         # target rails version
  USE_CACHE_A="${USE_CACHE_A:-0}"
  USE_CACHE_B="${USE_CACHE_B:-0}"

  prereq_ruby_version
  prereq_stub

  cd ${DIR}/build/stub
  [[ $USE_CACHE_B -eq 1 ]] || bundle exec railties/exe/rails new ../rails-app --dev --database=postgresql
  cd ${DIR}/build/rails-app
  git add --all
  git commit -m "Initial commit" || true
  ruby -i -pe "sub(/gem 'rails', path: .*/, \"gem 'rails', ref: '${RAILS_COMMIT}'\")" Gemfile
  git add Gemfile
  git commit -m "Repoint path"
  bundle install
  git add --all
  git commit -m "Using rails version ${RAILS_COMMIT}"
  bundle exec rails db:drop db:create db:migrate
  git add --all
  git commit -m "bundle exec rails db:drop db:create db:migrate"

  push_changes
}

##
# Targeting latest ruby version
#
prereq_ruby_version() {
  expected_version=$(curl -s https://cache.ruby-lang.org/pub/ruby/index.txt | tail -n 1 | cut -f1 | cut -d '-' -f2)
  found_version=$(ruby -v | perl -nle 'm/ruby ([\d\.]*)/; print $1')
  if ! [ "$expected_version" = "$found_version" ]; then
    echo "error: Ruby $expected_version expected"
    exit 1
  fi  
}

##
# Download rails stub
#
prereq_stub() {
  cd ${DIR}
  [[ $USE_CACHE_A -eq 1 ]] || git clone -b $TARGET --single-branch https://github.com/rails/rails build/stub
  cd ${DIR}/build/stub
  RAILS_COMMIT=$(git rev-parse --short HEAD) # comes in handy later
  bundle install
}


##
# Push changes
#
push_changes() {
  cd ${DIR}
  git clone https://github.com/la-ruby/rails-app.git build/rails-app-duplicate
  cd ${DIR}/build/rails-app-duplicate
  KNOWN_RAILS_FILES=(
    .browserslistrc
    .gitignore
    .ruby-version
    Gemfile
    Gemfile.lock
    README.md
    Rakefile
    app
    babel.config.js
    bin
    config
    config.ru
    db
    lib
    log
    node_modules
    package.json
    postcss.config.js
    public
    storage
    test
    tmp
    vendor
    yarn.lock)
  for file in "${KNOWN_RAILS_FILES[@]}"
  do
     echo "$file"
     rm -rf $file
     sleep 1
  done
  [ $(ls -1A . | wc -l) -eq 1 ] # make sure dir is clean (only .git remains)
  mv .git .git.renamed
  rm -rf node_modules/*
  rsync -aP --exclude=.git ${DIR}/build/rails-app/* ${DIR}/build/rails-app-duplicate/
  mv .git.renamed .git  # redundant because of the exclude above
  git add --all
  git commit -m "Daily update"
  if [ ${TRAVIS} = "true" ]; then
    git remote add origin2 https://${GH_TOKEN}@github.com/la-ruby/rails-app.git > /dev/null 2>&1
    git push --quiet --set-upstream origin2 master
  fi
}



main "$@"
echo "ok"
