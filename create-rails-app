#!/bin/bash -ex
#
RAILS_VERSION="7-2-stable"
BOOTSTRAP_VERSION="5.3"



download() {
  (git clone -b 7-1-stable --single-branch https://github.com/rails/rails /tmp/rails) || true
}

generate() {
  pushd /tmp/rails
  gem install bundler --pre # Temporary
  rm Gemfile.lock           # Temporary
  bundle install
  bundle exec railties/exe/rails new /tmp/created-rails-app --dev --database=postgresql --javascript=esbuild --css=bootstrap
  cd /tmp/created-rails-app

  # this is a one time thing
  if [ "$(uname)" == "Darwin" ]; then
    true # dp nothing on macos
  else
    git config --global init.defaultBranch main
    git config --global user.email "example@example.com"
    git config --global user.name "Sam Bot"
  fi

  commit "Initial commit - did rails new --database=postgresql ..."
  popd
}

# repoint gemfile to github rails/rails
repoint() {
  pushd /tmp/created-rails-app
  replace_line 'gem "rails' "gem 'rails', :github => 'rails/rails', :branch => '"$RAILS_VERSION"'" Gemfile
  rm Gemfile.lock
  bundle install
  bundle lock --add-platform ruby # is this needed nowadays?
  remove_line_containing_word "Use local checkout of Rails" Gemfile
  ./bin/setup
  commit "Using rails branch at github"
  popd
}

randomize_name() {
  pushd /tmp/created-rails-app
  npm install --global haikunator-cli
  name=$(haikunator | cut -f 2 -d '-')
  name2=$(echo $name | perl -nle 'print uc')
  name3=$(echo $name | perl -nle 'print ucfirst lc')
  echo "Names: $name $name2 $name2"
  # replace_string 'CreatedRailsApp' $name3 config/application.rb
  perl -p -i -e 's/CreatedRailsApp/'$name3'/g' config/application.rb
  perl -p -i -e 's/CreatedRailsApp/'$name3'/g' app/views/layouts/application.html.erb
  perl -p -i -e 's/created_rails_app/'$name'/g' config/*.yml
  perl -p -i -e 's/CREATED_RAILS_APP/'$name2'/g' config/*.yml
  perl -p -i -e 's/created_rails_app/'$name'/g' config/environments/*.rb
  commit "Using unique name for rails application"
  popd
}

# turbo / stimulus / hotwire / ...
hotwired() {
  pushd /tmp/created-rails-app
  replace_line 'gem "turbo-rails' "gem 'turbo-rails', :github => 'hotwired/turbo-rails', :branch => 'main'" Gemfile
  bundle install
  insert_line_after 'viewport' '    <meta name="turbo-refresh-method" content="morph">' app/views/layouts/application.html.erb
  commit "Turbo setup"
  popd
}

# adds devise gem
devise() {
  pushd /tmp/created-rails-app
  bundle add devise --git "https://github.com/heartcombo/devise" --branch "main" &>/dev/null
  bundle install &>/dev/null
  ./bin/rails generate devise:install
  ./bin/rails generate devise User
  insert_as_first_line '# frozen_string_literal: true\n' app/models/user.rb
  ./bin/rails db:migrate
  prepend_all_lines '# ' test/fixtures/users.yml
  insert_line_after 'class ActiveSupport' '  include Devise::Test::IntegrationHelpers' test/test_helper.rb
  commit "Installed devise"
  popd
}

# adds pundit for authorization
pundit() {
  pushd /tmp/created-rails-app
  bundle add pundit &>/dev/null  
  bundle install &>/dev/null
  # TODO:
  # ...Include Pundit::Authorization in your application controller:
  #   class ApplicationController < ActionController::Base
  #     include Pundit::Authorization
  #   end

  ./bin/rails g pundit:install
  insert_line_after 'class ApplicationController' '  include Pundit::Authorization' app/controllers/application_controller.rb
  mv app/policies/application_policy.rb  app/policies/application_policy.rb.txt
  # so coverage metric is not affected
  commit "Install pundit"
  popd
}


activejob() {
  pushd /tmp/created-rails-app
  bundle add sidekiq
  cp ~/work/create-rails-app/create-rails-app/templates/config/initializers/sidekiq.rb config/initializers/
  # is this needed? i guess without it rails uses the memory cache store
  # insert_before_last_line 'config.cache_store = :redis_cache_store, { url: ENV.fetch("REDIS_URL", "redis://localhost:6379/0") }' config/environments/production.rb
  insert_before_last_line 'config.active_job.queue_adapter     = :sidekiq' config/environments/development.rb
  insert_before_last_line 'config.active_job.queue_adapter     = :sidekiq' config/environments/production.rb
  insert_file_before_last_line ~/work/create-rails-app/create-rails-app/templates/config/routes_sidekiq.rb config/routes.rb

  commit "Setup activejob"
  popd
}

# Some extra setup useful for production running of activestorage
activestorage() {
  pushd /tmp/created-rails-app
  echo 'gem "aws-sdk-s3", require: false' >> Gemfile
  bundle install &>/dev/null
  commit "Setup activestorage"
  popd
}




#
#
#
#
#
# some widgets still expect jquery in the window. namespace
jquery() {
  pushd /tmp/created-rails-app
  (cd /tmp;
    curl -s -O https://code.jquery.com/jquery-3.6.0.min.js)
  cp /tmp/jquery-3.6.0.min.js public/
  echo '<script src="/jquery-3.6.0.min.js"></script>' >> app/views/_javascripts.html.erb
  insert_line_after 'javascript_include_tag' '    <%= render "/javascripts" %>' app/views/layouts/application.html.erb
  insert_line_before "stylesheet_link_tag" "    <%= render '/stylesheets' %>" app/views/layouts/application.html.erb
  touch app/views/_stylesheets.html.erb
  commit "Installed jquery"
  popd
}

bootstrap() {
  pushd /tmp/created-rails-app
  # Download and compile bootstrap
  (cd /tmp/
    (git clone git@github.com:twbs/bootstrap.git || true)
    cd /tmp/bootstrap
    npm install &>/dev/null
    npm run dist &>/dev/null)
  cp /tmp/bootstrap/dist/css/bootstrap.css* public/
  echo '<link rel="stylesheet" href="/bootstrap.css">' >> app/views/_stylesheets.html.erb
  cp /tmp/bootstrap/dist/js/bootstrap.bundle.js* public/
  echo '<script src="/bootstrap.bundle.js"></script>' >> app/views/_javascripts.html.erb
  prepend_all_lines '\/\/ ' app/assets/stylesheets/application.bootstrap.scss
  echo "// instead using bootstrap at app/views/_javascripts" >> app/assets/stylesheets/application.bootstrap.scss
  replace_line 'import \* as bootstrap' '// import * as bootstrap from "bootstrap"' app/javascript/application.js
  commit "Installed bootstrap"
  popd
}

bootstrap_icons() {
  pushd /tmp/created-rails-app
  (cd /tmp/
   curl -s -L -O https://github.com/twbs/icons/archive/refs/heads/main.zip
   myunzip main.zip &>/dev/null)
  cp /tmp/icons-main/font/bootstrap-icons.css public/
  mkdir public/fonts
  cp /tmp/icons-main/font/fonts/* public/fonts/
  echo '<link rel="stylesheet" href="/bootstrap-icons.css">' >> app/views/_stylesheets.html.erb
  commit "Installed bootstrap icons"
  popd
}

fontawesome() {
  pushd /tmp/created-rails-app
  (cd /tmp/
   curl -s -L -O https://github.com/FortAwesome/Font-Awesome/archive/refs/heads/6.x.zip
   myunzip 6.x.zip &>/dev/null)
  mkdir -p public/Font-Awesome/css
  mkdir -p public/Font-Awesome/webfonts
  cp /tmp/Font-Awesome-6.x/css/all.css public/Font-Awesome/css/
  cp /tmp/Font-Awesome-6.x/webfonts/* public/Font-Awesome/webfonts/
  echo '<link rel="stylesheet" href="/Font-Awesome/css/all.css">' >> app/views/_stylesheets.html.erb
  commit "Installed fontawesome"
  popd
}

# install flatpickr - lightweight and powerful datetime picker.
flatpickr() {
  pushd /tmp/created-rails-app
  (cd public
     curl -s -L -O https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css
     curl -s -L -O https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.js)
  echo '<link rel="stylesheet" href="/flatpickr.min.css">' >> app/views/_stylesheets.html.erb
  echo '<script src="/flatpickr.min.js"></script>' >> app/views/_javascripts.html.erb
  commit "Installed flatpickr"
  popd
}


administrate() {
  pushd /tmp/created-rails-app
  bundle add administrate &>/dev/null
  commit "Installed administrate"
  popd
}

# a pagination gem
kaminari() {
  pushd /tmp/created-rails-app
  bundle add kaminari &>/dev/null
  commit "Installed kaminari"
  popd
}

# Basic setup for rails flash messages
flash() {
  pushd /tmp/created-rails-app
  cp ~/work/create-rails-app/create-rails-app/templates/app/views/_flashes.html.erb app/views/
  cp ~/work/create-rails-app/create-rails-app/templates/app/javascript/controllers/fade_out_controller.js app/javascript/controllers/
  insert_line_after '<body' '    <%= render "/flashes" %>' app/views/layouts/application.html.erb
  commit "Setup flash messages"
  popd
}

# Adding modal wrapper element
modals() {
  pushd /tmp/created-rails-app
  cp ~/work/create-rails-app/create-rails-app/templates/app/javascript/controllers/modalopener_controller.js app/javascript/controllers/
  cp ~/work/create-rails-app/create-rails-app/templates/app/views/_modal_wrapper.html.erb app/views/
  insert_line_after 'yield' "    <%= render '/modal_wrapper' %>" app/views/layouts/application.html.erb
  commit "Adding modal wrapper element"
  popd
}


# some extra styles
stylesheets() {
  pushd /tmp/created-rails-app
  cp ~/work/create-rails-app/create-rails-app/templates/app/assets/stylesheets/debug.css app/assets/stylesheets/
  echo "// @import 'debug';" >> app/assets/stylesheets/application.bootstrap.scss
  commit "Added some extra css"
  popd
}

constants() {
  pushd /tmp/created-rails-app
  cp ~/work/create-rails-app/create-rails-app/templates/config/constants.rb config/
  echo 'require Rails.root.join("config/constants")' >> config/application.rb
  commit "Simple constant overriding mechanism"
  popd
}

# Prefer factories over fixtures
factory_bot() { 
  pushd /tmp/created-rails-app
  bundle add factory_bot_rails --group "test,development" &>/dev/null
  bundle add faker &>/dev/null
  mkdir test/factories
  insert_line_after 'class ActiveSupport' '  include FactoryBot::Syntax::Methods' test/test_helper.rb
  commit "Installed factory_bot"
  popd
}

# tweaks related to test framework
testing() {
  pushd /tmp/created-rails-app
  # a custom script for autotesting
  cp ~/work/create-rails-app/create-rails-app/templates/bin/autotest bin/
  chmod +x ./bin/autotest
  # parallelize not used atm
  replace_string 'parallelize' "\x23\x20parallelize" test/test_helper.rb # using escapes to avoid 'not terminated' error
  commit "Setup test framework"
  popd
}

# should output: Coverage report generated ... 1328 / 1328 LOC (100.0%) covered.
# when you do COVERAGE=1 ./bin/rails test
simplecov() {
  pushd /tmp/created-rails-app
  echo "gem 'simplecov', require: false, group: :test" >> Gemfile
  bundle install &>/dev/null
  echo "coverage" >> .gitignore
  cat ~/work/create-rails-app/create-rails-app/templates/test/test_helper.rb.tt test/test_helper.rb > /tmp/file3
  mv /tmp/file3 test/test_helper.rb
  mkdir test/support || true
  cp ~/work/create-rails-app/create-rails-app/templates/test/support/00_simplecov.rb test/support/
  string='Dir[File.expand_path('\''support/**/*.rb'\'', __dir__)].sort.each { |rb| require(rb) }'
  mysed -i "/class ActiveSupport.*/i $string" test/test_helper.rb
  # ^ add line before matched line
  mysed -i -r 's/(class ActiveSupport::TestCase)/\n\1/g' test/test_helper.rb
  # ^ adds a newline before matched line
  # adding minitest-test_profile gem
  bundle add minitest-test_profile --group "test"&>/dev/null
  cp ~/work/create-rails-app/create-rails-app/templates/test/support/minitest-test_profile.rb test/support/

  commit "Installed simplecov"
  popd
}

# Prevent test suite making outgoing network connections
# with the message: WebMock::NetConnectNotAllowedError: Real HTTP connections are disabled
webmock() {
  pushd /tmp/created-rails-app
  bundle add webmock --group "test" &>/dev/null
  cp ~/work/create-rails-app/create-rails-app/templates/test/support/webmock.rb test/support/
  commit "Use webmock for http requests"
  popd
}

# cron like scheduling
scheduler() {
  pushd /tmp/created-rails-app
  # REVISIT: was getting  pid=4 tid=jz0 ERROR: undefined method `merge' for ["name", "example_job", "klass", "Examp
  # on heroki
  # bundle add sidekiq-cron --git "https://github.com/ondrejbartas/sidekiq-cron" --branch "master" &>/dev/null
  # cp ~/work/create-rails-app/create-rails-app/templates/config/initializers/sidekiq_cron.rb config/initializers/
  # commit "Installed sidekiq-cron"
  popd
}

# using sengrid for email
sendgrid() {
  pushd /tmp/created-rails-app
  bundle add sendgrid-ruby --optimistic &>/dev/null
  commit "Install sendgrid"
  popd
}

# ruby gem for error monitoring
rollbar() {
  pushd /tmp/created-rails-app
  bundle add rollbar &>/dev/null
  ./bin/rails generate rollbar '<%= ENV["ROLLBAR_POST_SERVER_ITEM_ACCESS_TOKEN"] %>'
	# ^ this ends up needing some manual editing
  echo '<%= render "/rollbar" if Rails.env.production? %>' >> app/views/_javascripts.html.erb
  cp ~/work/create-rails-app/create-rails-app/templates/app/views/_rollbar.html.erb app/views/
  # cat config/initializers/rollbar.rb
  replace_string "Rails.env.test" "\!Rails.env.production" config/initializers/rollbar.rb
  commit "Install rollbar"
  popd
}

# flipper for feature flagging
# flipper() {
#   pushd /tmp/created-rails-app
#   bundle add flipper &>/dev/null
#   bundle add flipper-active_record &>/dev/null
#   ./bin/rails g flipper:active_record
#   commit "Install flipper"
#   popd
# }

# Adds a procfile - heroku uses this
procfile() {
  pushd /tmp/created-rails-app
  cp ~/work/create-rails-app/create-rails-app/templates/Procfile.tt Procfile
  commit "Added Procfile"
  popd
}

#
#
#
#
#
view_component() {
  pushd /tmp/created-rails-app
  bundle add view_component &>/dev/null
  commit "Install view_component"
  popd
}



# Aid debuggability
tracing() {
  pushd /tmp/created-rails-app
  cp ~/work/create-rails-app/create-rails-app/templates/app/javascript/debug.js app/javascript/  
  popd
}

# generates soe scaffolds to serve as examples
example() {
  pushd /tmp/created-rails-app
  # ./bin/rails generate scaffold Example title:string body:text seed:boolean
  # mysed -i 's/examples(:one)/FactoryBot.create(:example)/' test/controllers/examples_controller_test.rb
  # ^ simple replacement with sed
  ./bin/rails db:migrate
  # ./bin/rails g factory_bot:model Example title:string body:text seed:boolean
  # echo 'Example.where(seed: true).destroy_all' >> db/seeds.rb
  # echo '10.times { FactoryBot.create(:example, seed: true) }' >> db/seeds.rb
  # reduce noise
  # rm test/system/examples_test.rb
  # rm test/controllers/examples_controller_test.rb
  # rm app/controllers/examples_controller.rb
  # rm app/models/example.rb
  # rm -rf app/views/examples/
  # commit "Added example model, controller, etc"
  popd
}

# adding booking app as an example
example2() {
  pushd /tmp/created-rails-app
  mkdir app/components/
  mkdir app/reflexes/ || true
  cp -r ~/work/create-rails-app/create-rails-app/templates/app/views/bookings app/views/
  cp ~/work/create-rails-app/create-rails-app/templates/app/controllers/bookings_controller.rb app/controllers/
  cp ~/work/create-rails-app/create-rails-app/templates/app/models/booking.rb app/models/
  cp ~/work/create-rails-app/create-rails-app/templates/app/models/concerns/auto_color.rb app/models/concerns/
  cp ~/work/create-rails-app/create-rails-app/templates/app/components/bookings* app/components/
  cp ~/work/create-rails-app/create-rails-app/templates/app/assets/stylesheets/bookings.css app/assets/stylesheets/
  cp ~/work/create-rails-app/create-rails-app/templates/app/reflexes/* app/reflexes/
  cp ~/work/create-rails-app/create-rails-app/templates/test/fixtures/bookings.yml test/fixtures/
  cp ~/work/create-rails-app/create-rails-app/templates/test/system/bookings* test/system/
  cp ~/work/create-rails-app/create-rails-app/templates/app/helpers/application_helper.rb app/helpers/
  insert_file_before_last_line ~/work/create-rails-app/create-rails-app/templates/db/schema_bookings.rb db/schema.rb
  insert_file_before_last_line ~/work/create-rails-app/create-rails-app/templates/config/routes_bookings.rb config/routes.rb
  echo "@import 'bookings';" >> app/assets/stylesheets/application.bootstrap.scss
  echo "Booking.seed" >> db/seeds.rb
  commit "Added example booking app"
  popd
}

# react/jsx/tsx via esbuild
react() {
  pushd /tmp/created-rails-app
  yarn add react react-dom
  mkdir app/javascript/components
  cp ~/work/create-rails-app/create-rails-app/templates/hello.tsx app/javascript/components/
  echo 'import "./components/hello"' >> app/javascript/application.js
  commit "React is available if needed"
  popd
}

# sets up automated testing (ci) via github actions
ci() {
  pushd /tmp/created-rails-app
  mkdir -p .github/workflows/
  cp ~/work/create-rails-app/create-rails-app/templates/.github/workflows/test.and_lint.yml .github/workflows/
  # RUBOCOP
  rubocop --auto-gen-config app/ lib/ &>/dev/null
  insert_file_after_last_line ~/work/create-rails-app/create-rails-app/templates/.rubocop.yml.tt .rubocop.yml
  # REEK
  gem install reek
  cp ~/work/create-rails-app/create-rails-app/templates/.reek.yml.tt .reek.yml
  # ^ some "sensible" reek ignores for rails
  commit "Set up CI"
  popd
}


#
#
#
#
#
stimulus_reflex() {
  pushd /tmp/created-rails-app
  echo 'gem "stimulus_reflex", github: "la-ruby/stimulus_reflex", branch: "tracing"' >> Gemfile
  bundle install
  yarn add stimulus_reflex@https://github.com/stimulusreflex/dev-builds/archive/refs/tags/stimulus_reflex/496e560.tar.gz
  yarn install
  ~/work/create-rails-app/create-rails-app/installer.exp

  # bundle add stimulus_reflex
  
  # ./bin/rails stimulus_reflex:install esbuild
  # ./bin/rails stimulus_reflex:install
  # gem "stimulus_reflex", github: "stimulusreflex/stimulus_reflex", branch: "main"
  # yarn add stimulus_reflex@https://github.com/stimulusreflex/dev-builds/archive/refs/tags/stimulus_reflex/[commit sha].tar.gz
  # rubocop -A app/ --only Layout
  commit "Install stimulus reflex"
  popd
}

readme() {
  pushd /tmp/created-rails-app
  cp ~/work/create-rails-app/create-rails-app/templates/README.md.tt README.md
  commit "Added README"
  popd
}

# some additional gitignores
gitignore() {
  pushd /tmp/created-rails-app
  echo ".envrc" >> .gitignore
  echo "**/.DS_Store" >> .gitignore
  commit "Updated .gitignore"
  popd
}

upload() {
  pushd /tmp/created-rails-app
  if [ "$(uname)" == "Darwin" ]; then
    echo "not uploading on Darwin"
  else
    git remote add myremote git@github.com:la-ruby/created-rails-app.git
    git checkout -b latest
    git push -f myremote latest
    git checkout main

    git clone git@github.com:la-ruby/created-rails-app.git /tmp/downloaded-rails-app
    cd /tmp/downloaded-rails-app/
    find -not -path "./.git/*" -not -name ".git" -delete
    rsync --stats -aP --exclude='.git/' --exclude='node_modules/*' /tmp/created-rails-app/ /tmp/downloaded-rails-app/ &>/dev/null

    git add --all
    git commit -m "Updates for $(date +%D)"
    git push origin main
  fi
  popd
}

lame1674001972() {
  pushd /tmp/created-rails-app
  replace_string "class User < ApplicationRecord" "class User < ApplicationRecord #nodoc" app/models/user.rb
  commit "lame1674001972"
  popd
}

commit() {
  git add --all &>/dev/null
  git commit -m "$1" &>/dev/null
}

mysed () {
  case $(uname -s) in
    *[Dd]arwin* | *BSD* ) gsed "$@";;
    *) sed -i "$@";;
  esac
}

# TODO: is this needed?
myunzip () {
  case $(uname -s) in
    *[Dd]arwin* | *BSD* ) unzip "$@";;
    *) unzip "$@";;
  esac
}

replace_line() {
  mysed -i "/^$1/c\REMOVED" $3 # replaces matched line with given string
  mysed -i "/^REMOVED/c\\$2" $3 # replaces matched line with given string
}

replace_string() {
  perl -p -i -e 's/'$1'/'$2'/g' $3
}

prepend_all_lines() {
  mysed -i -e "s/^/$1/" $2 # prepend string to all lines
}

# add line after matched line
insert_line_after() {
  perl -s -p -i -e '$_.="$bbb\n" if /$aaa/' -- -aaa="$1" -bbb="$2" $3
}

# add line before matched line
insert_line_before() {
  perl -s -p -i -e '$_ = "$bbb\n$_" if /$aaa/' -- -aaa="$1" -bbb="$2" $3
}

# TODO: make two spaces optional
insert_before_last_line() {
  mysed -i '$i\
  '"$1" $2
}

insert_file_before_last_line() {
  mysed -i '$ d' $2 # remove last line from file
  cat $1 >> $2
  echo "end" >> $2
}

insert_file_after_last_line() {
  cat $1 >> $2
}

insert_as_first_line() {
  awk -v TEXT="$1" 'BEGIN {print TEXT};1' $2
}

remove_line_containing_word() {
  gawk -i inplace '!'"/$1/" $2
}


main() {
  download
  generate
  randomize_name
  repoint
  hotwired
  devise
  pundit
  activejob
  activestorage

  jquery
  bootstrap
  bootstrap_icons
  fontawesome
  flatpickr
  administrate
  kaminari
  flash
  modals
  stylesheets
  constants
  factory_bot
  testing
  simplecov
  webmock
  scheduler
  sendgrid
  rollbar
  # flipper
  procfile
  view_component
  stimulus_reflex
  example
  example2
  react
  ci
  readme
  gitignore
  upload
}

main
