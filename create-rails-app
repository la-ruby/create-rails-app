#!/bin/bash

RAILS_VERSION="7-0-stable"
BOOTSTRAP_VERSION="5.1"

download() {
  git clone -b 7-0-stable --single-branch https://github.com/rails/rails /tmp/rails
}

generate() {
  pushd /tmp/rails
  bundle install &>/dev/null
  bundle exec railties/exe/rails new /tmp/created-rails-app --dev --database=postgresql >/dev/null
  cd /tmp/created-rails-app
  commit "Did generate()"
  popd
}

# repoint gemfile to github rails/rails
repoint() {
  pushd /tmp/created-rails-app
  sed -i "/^gem \"rails/c\REMOVED" Gemfile # remove line
  replacement="gem 'rails', :github => 'rails/rails', :branch => '7-0-stable'"
  sed -i "/^REMOVED/c\\$replacement" Gemfile # add back line
  rm Gemfile.lock
  bundle install &>/dev/null
  bundle lock --add-platform ruby # this was needed because ci runs in linux
  ./bin/setup
  commit "Did repoint()"
  popd
}

# using newer version of turbo-rails
hotwired() {
  pushd /tmp/created-rails-app
  sed -i "/^gem \"turbo-rails/c\REMOVED" Gemfile # remove line
  replacement="gem 'turbo-rails', :github => 'hotwired/turbo-rails', :branch => 'main'"
  sed -i "/^REMOVED/c\\$replacement" Gemfile # add back line
  bundle install
  commit "Did hotwired()"
  popd
}



# adds devise gem
devise() {
  pushd /tmp/created-rails-app
  bundle add devise --git "https://github.com/heartcombo/devise" --branch "main" &>/dev/null
  bundle install &>/dev/null
  ./bin/rails generate devise:install
  ./bin/rails generate devise User
  ./bin/rails db:migrate
  sed -i -e 's/^/# /' test/fixtures/users.yml # stackoverflow/a/51102255
  commit "Did devise()"
  popd
}

# adds pundit for authorization
pundit() {
  pushd /tmp/created-rails-app
  bundle add pundit --git "https://github.com/varvet/pundit" --branch "main" &>/dev/null  
  bundle install &>/dev/null
  # TODO:
  # ...Include Pundit::Authorization in your application controller:
  #   class ApplicationController < ActionController::Base
  #     include Pundit::Authorization
  #   end
  # ...Optionally, you can run the generator, which will set up an
  # application policy with some useful defaults for you:
  #   rails g pundit:install  
  commit "Did pundit()"
  popd
}

bootstrap() {
  pushd /tmp/created-rails-app

  (cd /tmp/ && curl -s -O https://getbootstrap.com/docs/5.1/examples/sign-in/signin.css)
  sed -i 's/body/.bootstrap-signin-example-wrapper/g' /tmp/signin.css

  (cd /tmp/ && curl -s -O https://raw.githubusercontent.com/twbs/bootstrap/main/site/content/docs/5.1/examples/sign-in/index.html)
  mkdir -p app/views/devise/sessions
  cp /tmp/index.html app/views/devise/sessions/new.html.erb
  sed -i 1,9d app/views/devise/sessions/new.html.erb
  sed -i '1s/^/<div class="bootstrap-signin-example-wrapper text-center">\n/' app/views/devise/sessions/new.html.erb
  sed -i -e '$a</div>' app/views/devise/sessions/new.html.erb
  sed -i 's/{{< year >}}/2022/g' app/views/devise/sessions/new.html.erb


  str='<img class="mb-4" src="https://getbootstrap.com/docs/5.1/assets/brand/bootstrap-logo.svg" alt="" width="72" height="57">'
  sed -i "s@.*bootstrap-logo.svg.*@$str@" app/views/devise/sessions/new.html.erb
  echo '<style>' >> app/views/devise/sessions/new.html.erb
  cat /tmp/signin.css >> app/views/devise/sessions/new.html.erb
  echo '</style>' >> app/views/devise/sessions/new.html.erb

  # use rails form
  # str='<% end %>'
  perl -pi.bak -e 's/<\/form>/<% end %>/g' app/views/devise/sessions/new.html.erb
  rm app/views/devise/sessions/new.html.erb.bak
  str='  <%= form_for(resource, as: resource_name, url: session_path(resource_name), data: { turbo: false }) do |f| %>'
  sed -i "s@.*<form.*@$str@" app/views/devise/sessions/new.html.erb

  (cd /tmp/
  git clone git@github.com:twbs/bootstrap.git
  cd /tmp/bootstrap
  npm install &>/dev/null
  npm run dist &>/dev/null
  mkdir -p /tmp/created-rails-app/vendor/bootstrap-main/css
  mkdir -p /tmp/created-rails-app/vendor/bootstrap-main/js
  cp dist/js/bootstrap.bundle.js.map /tmp/created-rails-app/vendor/bootstrap-main/js/
  cp dist/js/bootstrap.bundle.js /tmp/created-rails-app/vendor/bootstrap-main/js/
  cp dist/css/bootstrap.css.map /tmp/created-rails-app/vendor/bootstrap-main/css/
  cp dist/css/bootstrap.css /tmp/created-rails-app/vendor/bootstrap-main/css/)

  string='\ *= require bootstrap-main/css/bootstrap.css'
  sed -i "/require_self.*/i $string" app/assets/stylesheets/application.css

  (cd public;
   ln -s ../vendor/bootstrap-main/js/bootstrap.bundle.js bootstrap.bundle.js)
  string='   <script src="/bootstrap.bundle.js"></script>'
  sed -i '/\/head.*/i\ '"$string"'' app/views/layouts/application.html.erb

  cd /tmp/created-rails-app
  commit "Did bootstrap()"
  popd
}

# fontawesome, etc
icons() {
  pushd /tmp/created-rails-app
  (cd /tmp/;
   curl -s -O https://codeload.github.com/FortAwesome/Font-Awesome/zip/refs/heads/master;
   unzip master) &>/dev/null
  mkdir -p vendor/Font-Awesome-master/css
  mkdir -p vendor/Font-Awesome-master/webfonts
  cp /tmp/Font-Awesome-master/css/all.css vendor/Font-Awesome-master/css/
  cp /tmp/Font-Awesome-master/webfonts/* vendor/Font-Awesome-master/webfonts/
  string='\ *= require Font-Awesome-master/css/all'
  sed -i "/require_self.*/i $string" app/assets/stylesheets/application.css
  string='Rails.application.config.assets.paths << "#{Rails.root}/vendor"'
  echo "$string" >> config/initializers/assets.rb
  commit "Installed fontawesome"
  popd
}

# some widgets still expect jquery in the window. namespace
jquery() {
  pushd /tmp/created-rails-app
  mkdir vendor/jquery
  (cd vendor/jquery;
     curl -s -O https://code.jquery.com/jquery-3.6.0.min.js)
  (cd public;
   ln -s ../vendor/jquery/jquery-3.6.0.min.js jquery-3.6.0.min.js)
  string='   <script src="/jquery-3.6.0.min.js"></script>'
  sed -i '/\/head.*/i\ '"$string"'' app/views/layouts/application.html.erb

  commit "Installed jquery"
  popd
}

nice_partials() {
  pushd /tmp/created-rails-app
  bundle add nice_partials --git "https://github.com/bullet-train-co/nice_partials" --branch "main" &>/dev/null
  commit "Installed nice_partials"
  popd
}

# a pagination gem
kaminari() {
  pushd /tmp/created-rails-app
  bundle add kaminari --git "https://github.com/kaminari/kaminari" --branch "master" &>/dev/null
  commit "Installed kaminari"
  popd
}

# Basic setup for rails flash messages
flash() {
  pushd /tmp/created-rails-app
  cp ~/work/create-rails-app/create-rails-app/templates/app/views/_flashes.html.erb app/views/
  cp ~/work/create-rails-app/create-rails-app/templates/app/javascript/controllers/fade_out_controller.js app/javascript/controllers/
  string='   <%= render "/flashes" %>'
  sed -i '/\.*<body.*/a\ '"$string"'' app/views/layouts/application.html.erb
  commit "Did flash()"
  popd
}

# Prefer factories over fixtures
factory_bot() { 
  pushd /tmp/created-rails-app
  bundle add factory_bot_rails --git "https://github.com/thoughtbot/factory_bot_rails" --group "test,development" --branch "main" &>/dev/null
  bundle add faker --git "https://github.com/faker-ruby/faker" --branch "master" &>/dev/null
  mkdir test/factories
  commit "Did factory_bot()"
  popd
}

# Prevent test suite making outgoing network connections
# with the message: WebMock::NetConnectNotAllowedError: Real HTTP connections are disabled
webmock() {
  pushd /tmp/created-rails-app
  bundle add webmock --git "https://github.com/bblimke/webmock" --group "test" --branch "master" &>/dev/null
  cp /home/runner/work/create-rails-app/create-rails-app/templates/test/support/webmock.rb test/support/
  commit "Use webmock for http requests"
  popd
}

# sometimes you want to vcr instead of webmock
vcr() {
  pushd /tmp/created-rails-app
  bundle add vcr --git "https://github.com/vcr/vcr" --group "test" --branch "master" &>/dev/null
  cp /home/runner/work/create-rails-app/create-rails-app/templates/test/support/vcr.rb test/support/
  commit "Installed vcr"
  popd
}

# cron like scheduling
clockwork() {
  pushd /tmp/created-rails-app
  bundle add clockwork --git "https://github.com/Rykian/clockwork" --branch "master" &>/dev/null
  cp /home/runner/work/create-rails-app/create-rails-app/templates/clock.rb clock.rb
  commit "Installed clockwork"
  popd
}

# Adds a procfile - heroku uses this
procfile() {
  pushd /tmp/created-rails-app
  cp /home/runner/work/create-rails-app/create-rails-app/templates/Procfile.tt Procfile
  commit "Added procfile"
  popd
}



# should output: Coverage report generated ... 1328 / 1328 LOC (100.0%) covered.
# when you do COVERAGE=1 ./bin/rails test
simplecov() {
  pushd /tmp/created-rails-app
  echo "gem 'simplecov', require: false, group: :test" >> Gemfile
  bundle install &>/dev/null
  echo "coverage" >> .gitignore
  cat /home/runner/work/create-rails-app/create-rails-app/templates/test/test_helper.rb.tt test/test_helper.rb > /tmp/file3
  mv /tmp/file3 test/test_helper.rb
  mkdir test/support || true
  cp /home/runner/work/create-rails-app/create-rails-app/templates/test/support/00_simplecov.rb test/support/
  string='Dir[File.expand_path("support/**/*.rb", __dir__)].sort.each { |rb| require(rb) }
'$'\n'
  sed -i "/class ActiveSupport.*/i $string" test/test_helper.rb

  # adding minitest-test_profile gem
  bundle add minitest-test_profile --git "https://github.com/y-yagi/minitest-test_profile" --group "test" --branch "master" &>/dev/null
  cp /home/runner/work/create-rails-app/create-rails-app/templates/test/support/minitest-test_profile.rb test/support/

  commit "Did simplecov()"
  popd
}


# generates soe scaffolds to serve as examples
example() {
  pushd /tmp/created-rails-app
  ./bin/rails generate scaffold Example title:string body:text seed:boolean
  sed -i 's/examples(:one)/FactoryBot.create(:example)/' test/controllers/examples_controller_test.rb
  ./bin/rails db:migrate
  ./bin/rails g factory_bot:model Example title:string body:text seed:boolean
  echo 'Example.where(seed: true).destroy_all' >> db/seeds.rb
  echo '10.times { FactoryBot.create(:example, seed: true) }' >> db/seeds.rb
  commit "Generated some code to serve as examples"
  popd
}

# sets up automated testing (ci) via github actions
ci() {
  pushd /tmp/created-rails-app
  mkdir -p .github/workflows/
  cp ~/work/create-rails-app/create-rails-app/templates/.github/workflows/verify.yml .github/workflows/
  # RUBOCOP
  cp ~/work/create-rails-app/create-rails-app/templates/.rubocop.yml.tt .rubocop.yml
  cp ~/work/create-rails-app/create-rails-app/templates/.rubocop_todo.yml.tt .rubocop_todo.yml
  # rubocop --auto-gen-config
  rubocop --regenerate-todo
  # REEK
  gem install reek
  reek --todo *
  cat ~/work/create-rails-app/create-rails-app/templates/.reek.yml.tt >> .reek.yml
  # ^ some "sensible" reek ignores for rails
  commit "Did ci()"
  popd
}

# some additional gitignores
gitignore() {
  pushd /tmp/created-rails-app
  echo ".envrc" >> .gitignore
  echo "**/.DS_Store" >> .gitignore
  commit "Did gitignore()"
  popd
}

readme() {
  pushd /tmp/created-rails-app
  cp ~/work/create-rails-app/create-rails-app/templates/README.md.tt README.md
  commit "Added README"
  popd
}

upload() {
  pushd /tmp/created-rails-app
  git remote add myremote git@github.com:la-ruby/created-rails-app.git
  git checkout -b latest
  git push -f myremote latest
  git checkout main

  git clone git@github.com:la-ruby/created-rails-app.git /tmp/downloaded-rails-app
  cd /tmp/downloaded-rails-app/
  find -not -path "./.git/*" -not -name ".git" -delete
  rsync --stats -aP --exclude='.git/' --exclude='node_modules/*' /tmp/created-rails-app/ /tmp/downloaded-rails-app/ &>/dev/null

  git add --all
  git commit -m "Updates for $(date +%D)"
  git push origin main
  popd
}

commit() {
  git add --all &>/dev/null
  git commit -m "$1" &>/dev/null
}

main() {
  # Some Prereqs - git setup
  git config --global init.defaultBranch main
  git config --global user.email "example@example.com"
  git config --global user.name "Sam Bot"

  download
  generate
  repoint
  hotwired
  devise
  pundit
  jquery
  bootstrap
  icons
  nice_partials
  kaminari
  flash
  factory_bot
  simplecov
  webmock
  vcr
  clockwork
  procfile
  example
  ci
  readme
  gitignore
  upload
}

main
